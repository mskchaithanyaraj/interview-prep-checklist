export const syllabus = {
  "1_ProgrammingFundamentalsAndCoreConcepts": {
    Topics: [
      "Types of Errors in Programming",
      "Syntax vs Runtime vs Logical Errors",
      "Semantic Errors",
      "Exception Handling (try/catch/finally)",
      "Checked vs Unchecked Exceptions (Java)",
      "Stack Trace",
      "Data Types, Variables, Operators",
      "Primitive vs Non-primitive",
      "Type Conversion vs Type Casting",
      "Size of data types in C across architectures (16-bit, 32-bit, 64-bit)",
      "Control Structures",
      "Loops: For, While, Do-While",
      "Conditional Statements: if-else, switch-case",
      "Jump statements: break, continue, return, goto",
      "Functions / Methods",
      "Call-by-value vs Call-by-reference",
      "Recursion",
      "Function Overloading vs Overriding",
      "Static methods",
      "Pure functions",
      "Arrays and Strings",
      "Jagged arrays",
      "String manipulation",
      "StringBuilder vs StringBuffer (Java)",
      "Memory Management in C",
      "malloc, calloc, realloc, free",
      "Dangling pointers, memory leaks",
      "Pointer arithmetic",
      "Bit Manipulation",
      "Bitwise operators (&, |, ^, ~, <<, >>)",
      "Bit masking, bitsets",
    ],
  },
  "2_ObjectOrientedProgramming": {
    KeyConcepts: [
      "Classes and Objects",
      "Abstraction",
      "Encapsulation",
      "Inheritance",
      "Polymorphism (Compile-time vs Run-time)",
      "Method Overloading vs Overriding",
      "Access Modifiers (public, private, protected, default)",
      "Constructors and destructors",
      "Copy constructor",
      "Static variables and methods",
      "Abstract classes and interfaces",
      "SOLID Principles",
      "Composition vs Inheritance",
      "Association, Aggregation, Dependency",
    ],
    InterviewFocus: [
      "Design patterns like Singleton, Factory, Builder",
      "Real-world scenarios using OOP (e.g., designing a library or payment system)",
      "Differences between abstract class and interface",
      "Why multiple inheritance is not allowed in Java but allowed in C++",
    ],
  },
  "3_DataStructuresAndAlgorithms": {
    DataStructures: {
      Array: ["Storage", "Matrix ops", "Rotate", "Spiral", "Subarray sums"],
      String: ["Text processing", "Anagram", "Palindrome", "Pattern matching"],
      Stack: [
        "DFS",
        "Expression evaluation",
        "Balanced parentheses",
        "Postfix eval",
      ],
      Queue: ["BFS", "Task scheduling", "Level order traversal"],
      LinkedList: ["Dynamic memory", "Reverse", "Detect cycle", "Merge"],
      Tree: ["File systems", "BSTs", "Traversals", "LCA", "Height"],
      BinarySearchTree: ["Searching", "Sorting", "Validate BST", "Floor/Ceil"],
      HeapPriorityQueue: [
        "Scheduling",
        "Kth largest",
        "Median finder",
        "Huffman coding",
      ],
      HashTable: ["Fast lookup", "Two sum", "Counting frequencies"],
      Graph: ["Networks", "Maps", "Shortest path", "MST", "Topo sort"],
    },
    Algorithms: [
      "Sorting: Bubble, Selection, Insertion, Merge, Quick, Heap, Radix, Counting",
      "Searching: Linear, Binary",
      "Divide and Conquer",
      "Greedy Algorithms",
      "Dynamic Programming: Knapsack, LIS, LCS, Coin Change, DP optimization",
      "Backtracking",
      "Graph Algorithms: BFS, DFS, Dijkstra, Prim, Kruskal, Floyd-Warshall",
      "String Matching: KMP, Rabin-Karp, Trie",
      "Bit Manipulation",
      "Recursion vs Iteration",
    ],
    TimeAndSpaceComplexity: [
      "Big O Notation",
      "Best/Average/Worst Case",
      "Amortized Analysis",
      "Depth of trees (balanced vs unbalanced)",
    ],
  },
  "4_OperatingSystem": {
    Topics: [
      "Process vs Thread",
      "Process Scheduling: FCFS, SJF, Round Robin, Priority Scheduling",
      "Inter-process Communication (IPC)",
      "Deadlock (Banker's Algorithm, Detection, Recovery)",
      "Memory Management: Paging, Segmentation",
      "Virtual Memory",
      "Page Replacement Algorithms: FIFO, LRU, Optimal",
      "File Systems",
      "Disk Scheduling: FCFS, SSTF, SCAN, C-SCAN",
      "Threads",
      "System Calls",
      "Synchronization: Mutex, Semaphore, Monitors",
      "Context Switching",
      "Thrashing",
    ],
    InterviewFocus: [
      "How OS manages resources during multitasking",
      "Explain how a process starts and ends",
      "What happens when you run a program?",
    ],
  },
  "5_ComputerNetworks": {
    Topics: [
      "OSI vs TCP/IP Model",
      "HTTP vs HTTPS vs FTP",
      "TCP vs UDP",
      "IP Addressing (IPv4 vs IPv6)",
      "DNS, DHCP, ARP",
      "Socket Programming",
      "Client-Server Architecture",
      "Routing Protocols",
      "SSL/TLS Handshake",
      "Cookies vs Sessions",
      "REST API",
      "Status Codes (200, 201, 400, 404, 500, etc.)",
      "CDN",
      "Load Balancing",
      "Firewalls, Proxies",
    ],
    InterviewFocus: [
      "Explain what happens when you type a URL in browser",
      "Difference between GET and POST",
      "How does a web server work?",
      "Describe the TCP three-way handshake",
    ],
  },
  SummaryChecklist: {
    DSA: "✅ At least 150 problems",
    OOP: "✅ Real-world examples",
    OS: "✅ Especially for internships",
    CN: "✅ Especially for full-stack/backend",
    DBMS: "✅ SQL + Schema Design",
    SystemDesign: "✅ Mid-senior level",
    Microservices: "✅ Mid-level onwards",
    Behavioral: "✅ Often ignored, very important",
  },
};
